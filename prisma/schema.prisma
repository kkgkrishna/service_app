datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  inquiries Inquiry[] @relation("UserToInquiries")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Inquiry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  service   String?  @db.String // <-- make it optional
  customerName         String
  mobileNo             String
  city                 String
  callbackTime         DateTime?
  email                String?
  appointmentTime      DateTime?
  amount               Float                 @default(0)
  status               InquiryStatus         @default(PENDING)
  priority             String
  alternateMobile      String?
  address              String?
  landmark             String?
  pincode              String
  state                String
  remark               String?
  cancelInquire        Boolean?               @default(false)
  cancelReason         String?
  feedback             String?
  note                 String?
  invoiceCustomer      String?

  userId               String?                @db.ObjectId
  user                 User?                  @relation("UserToInquiries", fields: [userId], references: [id])

  engineerId           String?               @db.ObjectId
  engineer             Engineer?             @relation("EngineerToInquiries", fields: [engineerId], references: [id])

  inquiryCategories    InquiryCategory[]
  inquirySubCategories InquirySubCategory[]

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Engineer {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String             @unique
  phone              String
  city               String
  status             Boolean            @default(true)
  address            String?

  inquiries          Inquiry[]          @relation("EngineerToInquiries")
  engineerCategories EngineerCategory[]

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Category {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  name               String             @unique

  subCategories      SubCategory[]
  engineerCategories EngineerCategory[]
  inquiryCategories  InquiryCategory[]

  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model SubCategory {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  subCategoryName       String
  price                 Float

  categoryId            String                @db.ObjectId
  category              Category              @relation(fields: [categoryId], references: [id])

  inquirySubCategories  InquirySubCategory[]

  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
}

model EngineerCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId

  engineerId  String     @db.ObjectId
  categoryId  String     @db.ObjectId

  engineer    Engineer   @relation(fields: [engineerId], references: [id])
  category    Category   @relation(fields: [categoryId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model InquiryCategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  inquiryId  String     @db.ObjectId
  categoryId String     @db.ObjectId

  inquiry    Inquiry    @relation(fields: [inquiryId], references: [id])
  category   Category   @relation(fields: [categoryId], references: [id])

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model InquirySubCategory {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  inquiryId      String      @db.ObjectId
  subCategoryId  String      @db.ObjectId

  inquiry        Inquiry     @relation(fields: [inquiryId], references: [id])
  subCategory    SubCategory @relation(fields: [subCategoryId], references: [id])

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum InquiryStatus {
  PENDING
  ACTIVE
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Role {
  USER
  ADMIN
}